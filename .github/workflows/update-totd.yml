name: Update TOTD

on:
  workflow_dispatch:
  schedule:
    # 18:00 UTC = 1:00 PM EST (no DST auto-switch)
    - cron: "0 18 * * *"

concurrency:
  group: update-totd
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      PUBLIC_DIR: .
      DEBUG: "0"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run TOTD fetcher
        run: |
          echo "Running TOTD fetcher..."
          node -v
          node scripts/totd-fetcher.js
          echo ""
          echo "Listing generated files:"
          ls -R data/totd || true
          echo ""
          echo "Root snapshot:"
          ls -l totd.json || true

      # Compute a stable content hash across your generated files
      - name: Compute new content hash
        id: newhash
        shell: bash
        run: |
          set -euo pipefail
          # Hash totd.json (if present) + all per-day JSONs in a stable order
          tmplist=$(mktemp)
          if [ -f totd.json ]; then
            echo "totd.json" >> "$tmplist"
          fi
          if [ -d data/totd ]; then
            find data/totd -type f -name '*.json' -print0 | sort -z | xargs -0 -I{} echo "{}" >> "$tmplist"
          fi

          if [ -s "$tmplist" ]; then
            # sha256 of concatenated per-file sha256s
            HASH=$(xargs -a "$tmplist" -I{} sha256sum "{}" | sort | sha256sum | cut -d' ' -f1)
          else
            HASH="none"
          fi

          echo "new=$HASH" >> "$GITHUB_OUTPUT"

      - name: Read previous hash (if any)
        id: prevhash
        shell: bash
        run: |
          PREV=$(git show HEAD:.totd.hash 2>/dev/null || true)
          echo "prev=${PREV:-none}" >> "$GITHUB_OUTPUT"

      - name: Commit updated TOTD data (only if changed)
        if: steps.newhash.outputs.new != steps.prevhash.outputs.prev
        run: |
          echo "${{ steps.newhash.outputs.new }}" > .totd.hash

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Only stage TOTD-related files + the hash file
          git add .totd.hash totd.json data/totd/*.json 2>/dev/null || true

          if ! git diff --cached --quiet; then
            echo "Changes detected — committing updates."
            git commit -m "data: refresh TOTD [skip ci]"
            # Rebase-pull to avoid non-fast-forward in busy repos
            git pull --rebase origin "${GITHUB_REF_NAME:-$(git rev-parse --abbrev-ref HEAD)}" || true
            git push
          else
            echo "No staged changes (hash matched)."
          fi

      - name: No changes — skip
        if: steps.newhash.outputs.new == steps.prevhash.outputs.prev
        run: echo "No content changes detected; nothing to push."
